{"version":3,"sources":["services/api.js","components/Card/index.js","components/List/index.js","components/Spinner/index.js","App.js","serviceWorker.js","index.js"],"names":["getRooms","fetch","then","response","json","Card","_this$props","this","props","picture","title","price","react_default","a","createElement","className","src","alt","type","Component","List","getUniqueIdsFromImages","str","choppedStr","split","length","slice","_this2","rooms","map","item","key","photoUrls","homecardHidpi","src_components_Card","concat","pricePerMonth","currencySymbol","Spinner","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchRooms","data","setState","homecards","isLoading","setLocalStorage","catch","err","console","log","state","dataRooms","localStorage","getItem","JSON","parse","setItem","stringify","href","Spinner_Spinner","src_components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20f19735.chunk.js","sourcesContent":["const ENDPOINT = '/api/homecards';\n\nconst getRooms = () => fetch(ENDPOINT)\n.then(response => response.json())\n\n\n\n\nexport {getRooms};","import React, { Component } from \"react\";\nimport \"./index.scss\";\nimport PropTypes from 'prop-types';\nclass Card extends Component {\n  render() {\n    const { picture, title, price } = this.props;\n    return (\n      <div className=\"room__container\">\n        <div className=\"room-card\">\n          <div className=\"image-container\">\n            <img src={picture} alt={title} className=\"room-card__image\" />\n          </div>\n          <div className=\"room-info-container\">\n            <div className=\"data-container\">\n              <h2 className=\"room-card__text\">{title}</h2>\n              <div className=\"room-card__price\">{price}</div>\n            </div>\n            <div className=\"btn-container\">\n              <button className=\"room-card__btn btn-secondary\" type=\"submit\">\n                More details\n              </button>\n              <button className=\"room-card__btn btn-primary\" type=\"submit\">\n                Book now!\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nCard.propTypes = {\n  picture: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired\n}\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./index.scss\";\nimport Card from \"../Card\";\nimport PropTypes from 'prop-types';\n\nclass List extends Component {\n  getUniqueIdsFromImages = str => {\n    const choppedStr = str.split(\"/\");\n    return choppedStr[choppedStr.length - 1].slice(0, -4);\n  };\n  render() {\n    const { rooms } = this.props;\n    return (\n      <ul className=\"app__list\">\n        {rooms.map(item => {\n          return (\n            <li\n              className=\"app__list-item\"\n              key={this.getUniqueIdsFromImages(item.photoUrls.homecardHidpi)}\n            >\n              <Card\n                picture={item.photoUrls.homecardHidpi}\n                title={item.title}\n                price={`${item.pricePerMonth}${item.currencySymbol}`}\n              />\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nList.propTypes = {\n  rooms: PropTypes.array.isRequired\n}\nexport default List;\n","import React from 'react'\nimport './index.scss';\n\nexport const Spinner = () => <div className=\"loader\">Loading...</div>\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport { getRooms } from \"./services/api\";\nimport List from \"./components/List\";\nimport { Spinner } from \"./components/Spinner\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rooms: [],\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    const dataRooms = localStorage.getItem(\"dataRooms\");\n    !dataRooms ?\n    this.fetchRooms() :\n    this.setState({\n      rooms: JSON.parse(dataRooms),\n      isLoading: false\n    });\n  }\n\n  fetchRooms = () => {\n    getRooms()\n      .then(data => {\n        this.setState({\n          rooms: data.homecards,\n          isLoading: false\n        });\n        this.setLocalStorage(data.homecards);\n      })\n      .catch(err => console.log(err));\n  };\n\n  setLocalStorage(data) {\n    localStorage.setItem(\"dataRooms\", JSON.stringify(data));\n  }\n\n  render() {\n    const rooms = this.state.rooms;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-header__title\">\n            <h1>\n              <a href=\"./\">spotaroom</a>\n            </h1>\n          </div>\n          <nav className=\"App-header__nav\">\n            <ul className=\"App-header__nav-list\">\n              <li>\n                <a href=\"./\">The company</a>\n              </li>\n              <li>\n                <a href=\"./\">How we work</a>\n              </li>\n              <li>\n                <a href=\"./\">Contact us</a>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <main>\n          {this.state.isLoading ?\n            <Spinner /> :\n            <List rooms={rooms} />\n          }\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}